require 'rake/clean'
require 'tsort'

# need this for determining file concatenation order
# to be used as instanse.tsort(data object)
class Hash
  include TSort
  alias tsort_each_node each_key
  def tsort_each_child(node, &block)
    fetch(node).each(&block)
  end
end

DIST = 'dist/livereload.js'
LIB = 'node_modules' # easiest way to make importing work in nodejs for testing

VERSION_FILE = 'VERSION'
VERSION_MODULE = 'src/version.coffee' # it is autogenerated

def version
    File.read(VERSION_FILE).strip
end
file VERSION_MODULE => VERSION_FILE do |t|
    File.open(t.name, 'w') { |f| f.write "exports.Version = '#{version}'" }
end

#
## Compiling

def set_compile_tasks srcs
    FileList.new(srcs).uniq().map { |src|
        js = File.join(LIB, File.basename(src).ext('js'))
        file js => src do
            sh 'coffee', '-c', '-b', '-o', File.dirname(js), src
        end
        js
    }
end

JS_MAIN = set_compile_tasks ['src/*.coffee', VERSION_MODULE]
JS_HELPERS = set_compile_tasks ['src/buildparts/*.coffee']

class JSModule
    attr_reader :name, :src

    def initialize file
        @file = file
        @name = File.basename(file, '.js')
        @src = File.read(@file)
    end
end

class JSModule
    attr_reader :name
    attr_accessor :file

    def initialize file
        @file = file
        @name = File.basename(file, '.js')
    end

    def deps
        data = []
        File.read(@file).scan(/require\('([^']+)'\)/) {|matches| data = data + matches}
        return data.uniq
    end
end

file DIST => ( JS_MAIN + JS_HELPERS ) do

    puts "CONCAT #{DIST}"

    code = [";(function() {"]

    JS_HELPERS.each { |f| code << File.read(f) }

    # doing fancy Topological Sort because we are concatenating a dependency tree.
    # it must be in "depended-upon first" order.
    sorter = {}
    modules = {}
    JS_MAIN.uniq().each do |f|
        mod = JSModule.new(f)
        modules[mod.name] = mod
        sorter[mod.name] = mod.deps
    end
    sorter.tsort().each do |name|
        src = File.read(modules[name].file)
        code << "\n// #{name}\n;(function(){\n#{src}\n})();"
    end

    code << "})();"

    File.open(DIST, 'w') { |f| f.write code.join("\n") }
end

desc "Build livereload.js"
task :build => DIST

desc "Embed version number where it belongs"
# version incorporation is part of build now. We are watching the VERSION file there.
task :version => :build

desc "Increase version number"
task :bump do
    components = version().split('.')
    components[-1] = (components[-1].to_i + 1).to_s
    File.open(VERSION_FILE, 'w') { |f| f.write "#{components.join('.')}\n" }
    puts "#{prev} => #{version}"
    Rake::Task[:version].invoke
end

desc "Tag the current version"
task :tag do
    sh 'git', 'tag', "v#{version}"
end

desc "Move (git tag -f) the tag for the current version"
task :retag do
    sh 'git', 'tag', '-f', "v#{version}"
end

task :default => :build


file 'node_modules/jsdom' do |f|
    # On Windows (and, likely many other platforms) latest jsdom
    # is very likely to fail to install, or install in a broken way
    # This is mostly due to Contextify prereq, which, even Shimmed
    # does not work reliably.
    # jsdom 0.2.1 is the last version NOT to use Contextify. Hence, the '@0.2.1'
    sh 'npm', 'install', 'jsdom@0.2.1'
end

task :test => ['node_modules/jsdom', :build] do
    sh(
        'mocha', 
        '--ui', 'exports', 
        '--globals', 'DOC_TYPE_START,DOC_TYPE_END',
        '--compilers', 'coffee:coffee-script'
    )
end

CLOBBER << DIST
CLOBBER << 'node_modules'
CLEAN.include *JS_MAIN
CLEAN.include *JS_HELPERS
